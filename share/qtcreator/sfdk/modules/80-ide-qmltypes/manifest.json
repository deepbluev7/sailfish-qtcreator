{
    "version": 4,
    "domain": "ide",
    "trBrief": "IDE support",

    "trDescription": "=== Generating Type Information for QML Modules With Plugins\n\nQML modules may use plugins to expose components implemented in C++ to QML applications.  The details on the APIs implemented by plugins are not directly available to a code editor. An external type information is required in order to enable advanced code editing features in this case.  Qt Creator recognizes so called 'qmltypes' files for this purpose.\n\nBeside the possibility to write qmltypes files manually, Qt comes with a tool named 'qmlplugindump' that allows generating qmltypes files automatically.  One needs to be aware, though, that due to the way it works, running qmlplugindump under build environment is not always possible.  Usually, it is necessary to deploy QML modules to a target, invoke qmlplugindump there and transfer the results back.\n\nsfdk provides the 'qmltypes' command that makes this task less cumbersome. It uses a %{OsVariant} Emulator as the target environment for qmlplugindump invocation and it takes care of restoring it to the original state after use.",

    "worker":
    {
        "type": "engine-command",
        "version": 5,
        "program": "sdk-make-qmltypes",
        "omitSubcommand": true,
        "optionFormatter": "module.formatOption"
    },

    "commands":
    [
        {
            "name": "qmltypes",
            "trSynopsis": "[--no-deploy] [--no-keep] [--no-restore-emulator] [--restore-emulator]",
            "trBrief": "Generate qmltypes files",
            "configOptions": ["*", "device!", "target!"],
        "trDescription": "Generate qmltypes files with the help of qmlplugindump executed on a %{OsVariant} Emulator.\n\nDue to the way it works, running qmlplugindump under build environment is not always possible. Usually, it is necessary to deploy binaries to a target and invoke qmlplugindump there in order to update qmltypes files.\n\nThis command makes this task less cumbersome, using a %{OsVariant} Emulator as the target environment, deploying the locally built packages automatically (unless overriden with '--no-deploy') and restoring the emulator to its original state when finished (unless overriden with '--no-restore-emulator').\n\nIt relies on the following convention:\n\n[verse]\n--\nEvery '*.qmltypes' file known to Git can be updated simply\nby running `make qmltypes` under the containing directory\n--\n\nIf you are adding a new qmltypes file, start by creating and empty file and adding it to Git index. Only files known to Git are recognized by this tool.\n\nThe 'qmltypes' make target is supposed to invoke qmlplugindump in the same way as if the respective QML modules were already installed system-wide - the recipe will be executed inside a %{OsVariant} Emulator after installing the respective packages.\n\nExample how to achieve this with qmake-based projects:\n\n    qmltypes.commands = \\\n        qmlplugindump -nonrelocatable org.example 1.0 \\\n            > $$PWD/plugins.qmltypes\n    QMAKE_EXTRA_TARGETS += qmltypes\n\nAfter successful execution, the emulator will be restored to its original state unless overriden with '--no-restore-emulator'. On failure, the emulator will be left in the modified state and can be restored manually with the '--restore-emulator' option at any time later.\n\nThe qmlplugindump tool is known to produce incomplete (or otherwise corrupted) results for some QML modules. For that reason it may be necessary to maintain manual additions in the generated qmltypes file, which implies the need to deal with unwanted deletion of these additions every time the qmltypes file is regenerated. In order to avoid that, the \"sdk-make-qmltypes:keep\" directive can be used in comments immediatelly preceding each manually added statement.  If the difference introduced by running qmlplugindump consists of nothing but removal of statements marked this way, sfdk will automatically revert such changes for your convenience (unless overriden with the '--no-keep' option)."
        }
    ],

    "externOptions":
    [
        "device",
        "output-dir",
        "output-prefix",
        "[no-]snapshot",
        "specfile",
        "target",
        "task"
    ],

    "options":
    [
    ]
}
